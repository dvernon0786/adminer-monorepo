name: Promote alias & smoke

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  promote-and-smoke:
    runs-on: ubuntu-latest
    env:
      PROD_DOMAIN: https://adminer.online
      HEALTH_PATH: /api/consolidated?action=health
      WAIT_TIMEOUT_SEC: 600
      WAIT_INTERVAL_SEC: 10
      POST_ALIAS_RETRY_SEC: 45
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}
    steps:
      - uses: actions/checkout@v4

      - name: Build SPA
        run: |
          cd apps/web
          npm ci
          npm run build

      - name: Copy SPA into API public dir
        run: |
          rm -rf apps/api/public/*
          cp -r apps/web/dist/* apps/api/public/

      - name: Guard SPA
        run: |
          chmod +x scripts/guard-spa.sh
          ./scripts/guard-spa.sh

      - name: Ensure tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Wait for latest production deployment to be READY
        id: wait
        shell: bash
        run: |
          set -euo pipefail
          deadline=$(( $(date +%s) + WAIT_TIMEOUT_SEC ))
          TEAM_ARG=""
          [[ -n "${VERCEL_TEAM_ID:-}" ]] && TEAM_ARG="&teamId=${VERCEL_TEAM_ID}"

          echo "Polling Vercel for latest prod deployment‚Ä¶"
          while [ "$(date +%s)" -lt "$deadline" ]; do
            resp="$(curl -fsS "https://api.vercel.com/v6/deployments?projectId=${VERCEL_PROJECT_ID}&limit=1${TEAM_ARG}" \
              -H "Authorization: Bearer ${VERCEL_TOKEN}")"
            state="$(jq -r '.deployments[0].state // empty' <<<"$resp")"
            url="$(jq -r '.deployments[0].url // empty' <<<"$resp")"
            id="$(jq -r '.deployments[0].uid // empty' <<<"$resp")"
            echo "Latest: state=${state:-n/a} url=${url:-n/a}"
            case "$state" in
              READY) break ;;
              ERROR|CANCELED) echo "‚ùå Deployment state=$state"; exit 1 ;;
            esac
            sleep "$WAIT_INTERVAL_SEC"
          done

          if [ "${state:-}" != "READY" ]; then
            echo "‚ùå Timed out waiting for READY"
            exit 1
          fi

          echo "deploy_url=https://${url}" >> "$GITHUB_OUTPUT"
          echo "deploy_id=${id}" >> "$GITHUB_OUTPUT"
          echo "‚úÖ READY: https://${url}"

      - name: Verify deployment is serverless (not static export)
        id: verify
        shell: bash
        run: |
          set -euo pipefail
          DEPLOY_URL="${{ steps.wait.outputs.deploy_url }}"
          
          echo "üîç Verifying deployment is serverless (not static export)..."
          echo "Testing: ${DEPLOY_URL}/api/consolidated?action=health"
          
          # Test the health endpoint
          BODY=$(curl -sS "${DEPLOY_URL}/api/consolidated?action=health" || true)
          
          # Check for static export signature
          if echo "$BODY" | grep -q '"nextExport":\s*true'; then
            echo "‚ùå CRITICAL: Static export detected in deployment"
            echo "   Response body: $BODY"
            echo "   This deployment cannot be aliased - it will break the apex domain"
            echo "   Root cause: API project built in export mode instead of serverless"
            exit 1
          fi
          
          # Check for successful response
          if ! echo "$BODY" | grep -q '"ok":\s*true'; then
            echo "‚ùå Deployment health check failed"
            echo "   Response body: $BODY"
            echo "   Cannot alias unhealthy deployment"
            exit 1
          fi
          
          echo "‚úÖ Deployment verified as serverless and healthy"
          echo "   No static export detected"
          echo "   Health endpoint responding correctly"

      - name: Pre-alias guard: Verify deployment has consolidated endpoint
        id: prealias
        shell: bash
        run: |
          set -euo pipefail
          DEPLOY_URL="${{ steps.wait.outputs.deploy_url }}"
          
          echo "üîç Pre-alias guard: Verifying deployment has consolidated endpoint..."
          echo "Testing: ${DEPLOY_URL}/api/consolidated?action=health"
          
          # Test the consolidated endpoint specifically
          RESPONSE=$(curl -sS -w "%{http_code}" "${DEPLOY_URL}/api/consolidated?action=health" || true)
          HTTP_CODE="${RESPONSE: -3}"
          BODY="${RESPONSE%???}"
          
          echo "HTTP Status: $HTTP_CODE"
          echo "Response Body: $BODY"
          
          # Check for 404 (endpoint not found)
          if [ "$HTTP_CODE" = "404" ]; then
            echo "‚ùå CRITICAL: Consolidated endpoint not found (404)"
            echo "   This deployment is missing the health check endpoint"
            echo "   Cannot alias deployment without working health endpoint"
            echo "   Root cause: TypeScript compilation failed or endpoint not built"
            exit 1
          fi
          
          # Check for 500 (server error)
          if [ "$HTTP_CODE" = "500" ]; then
            echo "‚ùå CRITICAL: Consolidated endpoint server error (500)"
            echo "   This deployment has the endpoint but it's broken"
            echo "   Cannot alias deployment with broken health endpoint"
            exit 1
          fi
          
          # Check for successful response
          if [ "$HTTP_CODE" = "200" ] && echo "$BODY" | grep -q '"ok":\s*true'; then
            echo "‚úÖ Pre-alias guard passed"
            echo "   Consolidated endpoint working correctly"
            echo "   Deployment ready for aliasing"
          else
            echo "‚ùå CRITICAL: Health endpoint not responding correctly"
            echo "   HTTP Status: $HTTP_CODE"
            echo "   Response: $BODY"
            echo "   Cannot alias deployment with non-functional health endpoint"
            exit 1
          fi

      - name: Alias apex domain to latest deployment (REST)
        id: alias
        shell: bash
        run: |
          set -euo pipefail
          TEAM_ARG=""
          [[ -n "${VERCEL_TEAM_ID:-}" ]] && TEAM_ARG="?teamId=${VERCEL_TEAM_ID}"
          DEPLOY_ID="${{ steps.wait.outputs.deploy_id }}"
          echo "Aliasing ${PROD_DOMAIN} -> ${{ steps.wait.outputs.deploy_url }}"
          curl -fsS -X POST \
            -H "Authorization: Bearer ${VERCEL_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "{\"alias\":\"${PROD_DOMAIN#https://}\"}" \
            "https://api.vercel.com/v2/deployments/${DEPLOY_ID}/aliases${TEAM_ARG}" >/dev/null
          echo "‚úÖ Alias updated. Sleeping ${POST_ALIAS_RETRY_SEC}s for edge cache‚Ä¶"
          sleep "${POST_ALIAS_RETRY_SEC}"

      - name: Enhanced smoke (detect nextExport:true & drift)
        id: smoke
        shell: bash
        continue-on-error: true
        run: |
          set -euo pipefail
          DEPLOY_URL="${{ steps.wait.outputs.deploy_url }}"
          APEX_URL="${PROD_DOMAIN%/}"
          HEALTH_DEPLOY="${DEPLOY_URL%/}${HEALTH_PATH}"
          HEALTH_APEX="${APEX_URL%/}${HEALTH_PATH}"
          echo "üîé Check deployment: $HEALTH_DEPLOY"
          code_deploy=$(curl -sS -o deploy_body.html -w "%{http_code}" "$HEALTH_DEPLOY" || true)
          echo "Deployment HTTP $code_deploy"
          echo "üîé Check apex: $HEALTH_APEX"
          code_apex=$(curl -sS -o apex_body.html -w "%{http_code}" "$HEALTH_APEX" || true)
          echo "Apex HTTP $code_apex"
          if grep -q '"nextExport":true' apex_body.html; then
            echo "‚ùå Apex still serving static export (\"nextExport\": true)."
            exit 1
          fi
          if [ "$code_apex" -ne 200 ] || [ "$code_deploy" -ne 200 ]; then
            echo "‚ùå Smoke failed: non-200 responses."
            exit 1
          fi
          echo "‚úÖ Smoke passed."

      - name: Full system check (prod)
        id: system-check
        shell: bash
        continue-on-error: true
        run: |
          set -euo pipefail
          chmod +x scripts/system-check.sh
          ./scripts/system-check.sh "${{ steps.wait.outputs.deploy_url }}"

      - name: Upload smoke artifacts (if failed)
        if: steps.smoke.outcome == 'failure' || steps.system-check.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: system-check-artifacts
          path: |
            deploy_body.html
            apex_body.html
            headers.txt
            smoke_index.html
            smoke_bundle.js
            smoke_bundle.headers 