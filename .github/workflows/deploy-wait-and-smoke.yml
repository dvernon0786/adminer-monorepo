# .github/workflows/deploy-wait-and-smoke.yml
name: Deploy Wait & Smoke

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  deploy-wait-and-smoke:
    runs-on: ubuntu-latest
    env:
      # Optional: if VERCEL_TOKEN not present, we won't call Vercel API.
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}

      # Optional: if not provided, fall back to production apex/www.
      APEX_URL: ${{ secrets.PROD_URL }}
      WWW_URL: ${{ secrets.WWW_URL }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Verify repo structure
        run: ls -R adminer/apps || true

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Build SPA
        run: |
          cd adminer/apps/web
          npm ci
          npm run build

      - name: Copy SPA into API public dir
        run: |
          mkdir -p adminer/apps/api/public
          rm -rf adminer/apps/api/public/*
          cp -r adminer/apps/web/dist/* adminer/apps/api/public/

      - name: Guard SPA
        run: |
          chmod +x scripts/guard-spa.sh
          ./scripts/guard-spa.sh

      - name: Ensure Vercel token is available
        run: |
          echo "VERCEL_TOKEN is ${VERCEL_TOKEN:+set}${VERCEL_TOKEN:-unset}"

      - name: Deploy to Vercel
        id: deploy
        run: |
          echo "üöÄ Deploying to Vercel..."
          
          # Check required environment variables
          if [[ -z "${VERCEL_ORG_ID:-}" ]]; then
            echo "‚ùå VERCEL_ORG_ID is not set. Please add it to GitHub Secrets."
            echo "   You can find it by running 'vercel teams ls' locally or checking vercel.com/account"
            exit 1
          fi
          
          if [[ -z "${VERCEL_PROJECT_ID:-}" ]]; then
            echo "‚ùå VERCEL_PROJECT_ID is not set. Please add it to GitHub Secrets."
            exit 1
          fi
          
          echo "‚úÖ Environment variables verified:"
          echo "   VERCEL_ORG_ID: ${VERCEL_ORG_ID:0:8}..."
          echo "   VERCEL_PROJECT_ID: ${VERCEL_PROJECT_ID:0:8}..."
          
          # Install Vercel CLI
          npm install -g vercel@latest
          
          # Deploy the API app with proper project linking
          cd adminer/apps/api
          
          # Deploy using simple approach (no complex project linking)
          echo "üöÄ Deploying with simple deployment..."
          vercel --prod --token "$VERCEL_TOKEN" --yes
          
          # Get the deployment URL from the simple deployment
          DEPLOY_URL=$(vercel ls --token "$VERCEL_TOKEN" --prod | grep -o 'https://[^[:space:]]*' | head -n1)
          echo "deployment_url=$DEPLOY_URL" >> "$GITHUB_OUTPUT"
          echo "‚úÖ Deployed to: $DEPLOY_URL"

      - name: Optionally fetch the latest deployment URL from Vercel
        id: vercel
        if: ${{ env.VERCEL_TOKEN != '' && env.VERCEL_PROJECT_ID != '' }}
        run: |
          set -euo pipefail
          # Try to read the most recent production deployment
          RESP="$(curl -sS -H "Authorization: Bearer $VERCEL_TOKEN" \
            "https://api.vercel.com/v6/deployments?projectId=${VERCEL_PROJECT_ID}&limit=1&target=production")" || true
          if [[ -n "${RESP:-}" && "$RESP" != "forbidden" ]]; then
            URL="$(node -e 'const x=JSON.parse(process.argv[1]||"{}"); const d=x.deployments?.[0]; if(d?.url) console.log("https://"+d.url)' "$(printf '%s' "$RESP")" || true)"
            if [[ -n "${URL:-}" ]]; then
              echo "deployment_url=$URL" >> "$GITHUB_OUTPUT"
              echo "Using Vercel deployment URL: $URL"
            fi
          fi

      - name: Prefer Vercel deployment URL if available
        run: |
          set -euo pipefail
          DEPLOY_URL="${{ steps.vercel.outputs.deployment_url || '' }}"
          if [[ -n "${DEPLOY_URL}" ]]; then
            echo "APEX_URL=$DEPLOY_URL" >> $GITHUB_ENV
            # Derive WWW from apex host if you want (not mandatory for smoke)
            HOST="$(echo "$DEPLOY_URL" | sed -E 's#^https?://##')"
            echo "WWW_URL=https://www.${HOST}" >> $GITHUB_ENV
          fi

      - name: Make smoke executable
        run: chmod +x scripts/smoke.sh

      - name: Wait a bit for edge cache
        run: sleep 20

      - name: Smoke test after deploy
        run: |
          chmod +x scripts/smoke.sh
          ./scripts/smoke.sh "${{ steps.deploy.outputs.deployment_url }}"
        env:
          APEX_URL: ${{ steps.deploy.outputs.deployment_url }}

      - name: Upload smoke debug artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-debug-artifacts
          path: |
            smoke_index.html
            smoke_bundle.js
            smoke_bundle.headers
            headers.txt

      - name: Rollback on smoke failure
        if: failure()
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          echo "‚ùå Smoke test failed - initiating rollback..."
          chmod +x scripts/rollback.sh
          scripts/rollback.sh 